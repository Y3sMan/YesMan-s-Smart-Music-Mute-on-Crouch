function on_game_start()
    RegisterScriptCallback("actor_on_update", actor_on_update)
    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
    RegisterScriptCallback("ym_actor_on_crouch_down", ym_actor_on_crouch_down)
    RegisterScriptCallback("ym_actor_on_crouch_up", ym_actor_on_crouch_up)
    RegisterScriptCallback("on_key_release", yesman_on_key_release)
end


local YM_MUSIC_CROUCH_TIMER = 0
local is_first_crouch = false
local is_changing_volume = false
local tg_update = 0
local tg_update_step = 1000 --[ms]
ym_music_mute = false

local DEBUG = true

AddScriptCallback("ym_actor_on_crouch_down")
AddScriptCallback("ym_actor_on_crouch_up")

local function dbg_printn(message)
    if DEBUG then
        news_manager.send_tip(db.actor, message, nil, nil, 3)
    end
end


local user_music_volume = 0
function actor_on_first_update()
    printf("YesMan's Smart Music Mute Loaded")
    user_music_volume = get_console_cmd(2, 'snd_volume_music') --- user's default music volume
end

function actor_on_update()
    -- dbg_printn("on_update_test loaded")
    -- manual music mute toggle overrides the smart behavior
    if ym_music_mute then
        return
    end

    if (IsMoveState("mcCrouch") ) then
        user_music_volume = get_console_cmd(2, 'snd_volume_music') --- regrab it just incase the user changed it during the game
        -- SendScriptCallback("ym_actor_on_crouch_down", 1)
        -- first crouch down
        if not is_first_crouch then
            if not is_changing_volume then
                level.set_music_volume(user_music_volume / 2)
                -- YM_MUSIC_CROUCH_TIMER = math.ceil( (user_music_volume / 2) *1000 )
                YM_MUSIC_CROUCH_TIMER = 0
            end

            dbg_printn("first crouch down")
            is_first_crouch = true
            is_changing_volume = true
        end
    elseif is_first_crouch then
        printf("!sending ym_actor_on_crouch_up")
        -- SendScriptCallback("ym_actor_on_crouch_up", 1)
        -- first crouch up
        if is_first_crouch then
            dbg_printn("first crouch up")
            is_first_crouch = false
        end
    end


    if is_changing_volume then
        if is_first_crouch then
            ym_decrement_music_vol() 
            if YM_MUSIC_CROUCH_TIMER < 10000 then
                YM_MUSIC_CROUCH_TIMER = YM_MUSIC_CROUCH_TIMER + 1
            end
        else
            if YM_MUSIC_CROUCH_TIMER <= 0.000 then
                ym_increment_music_vol()
            else
                YM_MUSIC_CROUCH_TIMER = YM_MUSIC_CROUCH_TIMER - 1
            end
        end

        if math.ceil( level.get_music_volume() ) < math.ceil( user_music_volume ) then
            is_changing_volume = true
        elseif math.ceil(level.get_music_volume() * 10) >= math.ceil(user_music_volume * 10) and (YM_MUSIC_CROUCH_TIMER <= 0.000) then
            YM_MUSIC_CROUCH_TIMER = 0
            is_changing_volume = false
            printf("!is_changing_volume is false!")
        end

        -- if YM_MUSIC_CROUCH_TIMER <= 0.000 then
        --     YM_MUSIC_CROUCH_TIMER = 0
        --     is_changing_volume = false
        --     printf("!is_changing_volume is false!")
        -- end
    end


    dbg_printn("!Current Vol:")
    dbg_printn(math.ceil( level.get_music_volume() *10 ))
    dbg_printn("!Max Vol:")
    dbg_printn(math.ceil( user_music_volume * 10))
    dbg_printn("TIMER:")
    news_manager.send_tip(db.actor, YM_MUSIC_CROUCH_TIMER, nil, nil, 3)
end


function ym_actor_on_crouch_down(flag)
    -- first crouch down
    if not is_first_crouch then
        if not is_changing_volume then
            level.set_music_volume(user_music_volume / 2)
        end

        dbg_printn("first crouch down")
        is_first_crouch = true
        is_changing_volume = true
    end
end


function ym_actor_on_crouch_up(flag)
    -- first crouch up
    if is_first_crouch then
        dbg_printn("first crouch up")
        is_first_crouch = false
    end
end

function ym_increment_music_vol()
    local tg = time_global()
    if (tg < tg_update) then
        return
    end
    tg_update = tg + tg_update_step

    local currentVol = level.get_music_volume()
    if (currentVol < user_music_volume) then 
        local newvol = currentVol + 0.1
        level.set_music_volume(newvol)
    end
end

function ym_decrement_music_vol()
    local tg = time_global()
    if (tg < tg_update) then
        return
    end
    tg_update = tg + tg_update_step

    local currentVol = level.get_music_volume()
    if (currentVol > 0.000) then 
        currentVol = currentVol - 0.1
        level.set_music_volume(currentVol)
    end

end

-- mute toggle
function yesman_on_key_release(key)
    if (key == ym_smart_crouch_music_mcm.KEY_MUTE_VOL) then
        if not ym_music_mute then
            printf("Mute is on")
            level.set_music_volume(0)
            ym_music_mute = true 
        else
            printf("Mute is off")
            level.set_music_volume(user_music_volume)
            ym_music_mute = false
        end         
    end
end