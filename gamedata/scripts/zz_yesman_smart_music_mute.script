--[[
	Author: YesMan
	Version: 1.0
    Credits: RavenAscendant - for making MCM

    Created: 06-24-2023
    Last edit: 10-28-2023
]]--
function on_game_start()
    RegisterScriptCallback("actor_on_update", actor_on_update)
    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
    -- RegisterScriptCallback("ym_actor_on_crouch_down", ym_actor_on_crouch_down)
    -- RegisterScriptCallback("ym_actor_on_crouch_up", ym_actor_on_crouch_up)
    RegisterScriptCallback("on_key_release", yesman_on_key_release)  -- for the mute toggle
end


--[[ 
    YM_MUSIC_CROUCH_TIMER controls how long to hold off on incrementing the
volume back to normal
--]]

local YM_MUSIC_CROUCH_TIMER = 0  
local is_first_crouch = false
local is_changing_volume = false
local tg_update = 0
local tg_update_step = 1000 --[ms]
ym_music_mute = false -- global for the manual mute toggle
ym_music_mute_initial_vol_dampen_percent = 50 -- this is a percentage -- mcm value
ym_music_mute_rate_of_change = 0.1 -- 1 volume unit per second; if you are at full, 1.0, volume, it will take 10 seconds to get to 0 
ym_music_mute_combat_mute = false



local DEBUG = false

-- AddScriptCallback("ym_actor_on_crouch_down")
-- AddScriptCallback("ym_actor_on_crouch_up")

local function dbg_printn(message)
    if DEBUG then
        xr_sound.set_sound_play(db.actor, "pda_tips")
        news_manager.send_tip(db.actor, message, nil, nil, 3)
    end
end

local function console_print(message)
    printf("!Smart Music Mute: %s", message)
end

local user_music_volume = 0
-- Get user's initial, default music volume
function actor_on_first_update()
    printf("---------------YesMan's Smart Music Mute Loaded-----------------")
    user_music_volume = get_console_cmd(2, 'snd_volume_music') --- user's default music volume
end

function actor_on_update()
    -- dbg_printn("on_update_test loaded")
    ---- manual music mute toggle overrides the smart behavior
    if ym_music_mute then
        return
    end
    user_music_volume = get_console_cmd(2, 'snd_volume_music') --- regrab it just incase the user changed it during the game

    -- calls for every frame the player is crouching
    if (IsMoveState("mcCrouch") ) then
        -- SendScriptCallback("ym_actor_on_crouch_down", 1)
        -- checks for the first frames of crouching, the first crouch down
        if not is_first_crouch then
            if not is_changing_volume then
                level.set_music_volume(user_music_volume * (ym_music_mute_initial_vol_dampen_percent / 100))
                YM_MUSIC_CROUCH_TIMER = 0
            end

            -- first crouch down
            console_print("Volume Decreasing")
            dbg_printn("first crouch down")
            is_first_crouch = true
            is_changing_volume = true
        end
    -- first crouch up
    elseif is_first_crouch then
        -- printf("!sending ym_actor_on_crouch_up")
        -- SendScriptCallback("ym_actor_on_crouch_up", 1)
        console_print("Volume Increasing")
            dbg_printn("first crouch up")
            is_first_crouch = false
    end


    -- if the timer isn't 0, basically
    if is_changing_volume then
        -- if crouching
        if is_first_crouch then
            -- decrement volume
            ym_decrement_music_vol() 
            -- cap the timer out 
            if YM_MUSIC_CROUCH_TIMER < 10000 then
                -- but establish a min for the timer, to double increment the timer in this time range
                if YM_MUSIC_CROUCH_TIMER > 3000 then
                    YM_MUSIC_CROUCH_TIMER = YM_MUSIC_CROUCH_TIMER + 1 -- once you get past a certain point, time increases at double the rate
                end
                YM_MUSIC_CROUCH_TIMER = YM_MUSIC_CROUCH_TIMER + 1
            end
        else
            -- when timer runs out
            if YM_MUSIC_CROUCH_TIMER <= 0.000 then
                -- if the rate of change isn't 0, increment the volume
                if ym_music_mute_rate_of_change > 0.00 then
                    ym_increment_music_vol()
                else
                    -- else just reset the volume
                    level.set_music_volume(user_music_volume)
                end
            else
                -- decrement the timer
                YM_MUSIC_CROUCH_TIMER = YM_MUSIC_CROUCH_TIMER - 1
            end
        end

        -- if current volume is different than the setting's reported value
        if math.ceil( level.get_music_volume() ) < math.ceil( user_music_volume ) then
            is_changing_volume = true
        -- if the two values are the same, stop the mod and return to normal
        elseif math.ceil(level.get_music_volume() * 10) >= math.ceil(user_music_volume * 10) and (YM_MUSIC_CROUCH_TIMER <= 0.000) then
            YM_MUSIC_CROUCH_TIMER = 0
            is_changing_volume = false
            -- printf("!is_changing_volume is false!")
        end
    end


    -- player is in combat
    -- if not (is_empty(xr_combat_ignore.fighting_with_actor_npcs)) and ym_music_mute_combat_mute then
    if not (is_empty(xr_combat_ignore.fighting_with_actor_npcs)) and ym_music_mute_combat_mute then
        -- printf("Player is in combat")
        if YM_MUSIC_CROUCH_TIMER <= 0.00 then
            console_print("Player is in combat; decreasing volume")
        end
        is_changing_volume = true
        YM_MUSIC_CROUCH_TIMER = 5000
        -- level.set_music_volume(0)
        ym_decrement_music_vol() 
    end

    dbg_printn("-------Smart Music Mute DEBUG:---------------")
    dbg_printn("!Max Vol:")
    dbg_printn(math.ceil( user_music_volume * 10))
    dbg_printn("!Current Vol:")
    dbg_printn(math.ceil( level.get_music_volume() *10 ))
    dbg_printn("TIMER:")
    dbg_printn(YM_MUSIC_CROUCH_TIMER)
end


-- function ym_actor_on_crouch_down(flag)
--     -- first crouch down
--     if not is_first_crouch then
--         if not is_changing_volume then
--             level.set_music_volume(user_music_volume / 2)
--         end

--         dbg_printn("first crouch down")
--         is_first_crouch = true
--         is_changing_volume = true
--     end
-- end


-- function ym_actor_on_crouch_up(flag)
--     -- first crouch up
--     if is_first_crouch then
--         dbg_printn("first crouch up")
--         is_first_crouch = false
--     end
-- end

function ym_increment_music_vol()
    local tg = time_global()
    if (tg < tg_update) then
        return
    end
    tg_update = tg + tg_update_step

    local currentVol = level.get_music_volume()
    if (currentVol < user_music_volume) then 
        currentVol = currentVol + ym_music_mute_rate_of_change
        level.set_music_volume(currentVol)
    end
end

function ym_decrement_music_vol()
    local tg = time_global()
    if (tg < tg_update) then
        return
    end
    tg_update = tg + tg_update_step

    local currentVol = level.get_music_volume()
    if (currentVol > 0.000) then 
        currentVol = currentVol - ym_music_mute_rate_of_change
        level.set_music_volume(currentVol)
    end

end

-- mute toggle
function yesman_on_key_release(key)
    if (key == ym_smart_crouch_music_mcm.KEY_MUTE_VOL) then
        if not ym_music_mute then
            console_print("Mute is on")
            level.set_music_volume(0)
            ym_music_mute = true 
        else
            console_print("Mute is off")
            level.set_music_volume(user_music_volume)
            ym_music_mute = false
        end         
    end
end